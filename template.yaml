AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >
  Setup to process files from S3, send messages to SQS, and
  allow Lambda to invoke itself or other functions.

Resources:
  ProducerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      Runtime: python3.8
      CodeUri: src/producer/
      MemorySize: 2048
      Timeout: 100
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          QUEUE_URL: !GetAtt OriginalSearchesQueue.QueueUrl
          BUCKET_NAME: raw-data-amadeus
          FILE_KEY: samplesmall.csv

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3SQSInvokePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: 'arn:aws:s3:::raw-data-amadeus/*'
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt OriginalSearchesQueue.Arn
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'  # Adjusted to remove circular dependency

  OriginalSearchesQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-OriginalSearchesQueue'

# Outputs:
#   ProducerFunctionArn:
#     Description: "ARN of the Producer Lambda Function"
#     Value: !GetAtt ProducerFunction.Arn

#   SQSQueueURL:
#     Description: "URL of the Original Searches SQS Queue"
#     Value: !Ref OriginalSearchesQueue

#   SQSQueueARN:
#     Description: "ARN of the Original Searches SQS Queue"
#     Value: !GetAtt OriginalSearchesQueue.Arn




    
  FilteredSearchesQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-FilteredSearchesQueue"

  BackupStorageQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-BackupStorageQueue"

  InitStackFunction:
    Type: AWS::Serverless::Function
    DependsOn: 
      - DecoratedSearchStorageNamespace
      - DecoratedSearchStorageWorkGroup
    Properties:
      Description: Initializes the Redshift database by creating the recommendations table
      CodeUri: src/init-stack-function
      Handler: app.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          DB_NAME: !Sub "${AWS::StackName}-decorated-search-storage-db"
          # DB_NAME: !GetAtt DecoratedSearchStorageNamespace.DbName  
          WORKGROUP_NAME: !Sub "${AWS::StackName}-decorated-search-storage-wg"
          # WORKGROUP_NAME: !Ref DecoratedSearchStorageWorkGroup
      Policies: 
        - Version: '2012-10-17'
          Statement: 
            - Effect: Allow
              Resource: !GetAtt DecoratedSearchStorageWorkGroup.Workgroup.WorkgroupArn
              Action: 
                - redshift-data:ExecuteStatement
                - redshift-serverless:GetCredentials

  FilterLambdaFunction:
    Type: AWS::Serverless::Function
    DependsOn: 
      - OriginalSearchesQueue
      - FilteredSearchesQueue
      - BackupStorageQueue
      - CurrencyCacheTable
    Properties:
      CodeUri: src/filter-function
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 15
      Environment:
        Variables:
          OUTPUT_QUEUE_URL: !Sub "${FilteredSearchesQueue}"
          BACKUP_STORAGE_QUEUE_URL: !Sub "${BackupStorageQueue}"
      Policies: 
        - SQSSendMessagePolicy:
            QueueName: !Ref FilteredSearchesQueue
        - SQSSendMessagePolicy:
            QueueName: !Ref BackupStorageQueue
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt OriginalSearchesQueue.Arn
            BatchSize: 10
            Enabled: true

  StoreFunction:
    Type: AWS::Serverless::Function
    DependsOn: 
      - FilteredSearchesQueue
      - DecoratedSearchStorageNamespace
      - DecoratedSearchStorageWorkGroup
    Properties:
      CodeUri: src/store-function
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 15
      Environment:
        Variables:
          DB_NAME: !Sub "${AWS::StackName}-decorated-search-storage-db"
          # DB_NAME: !GetAtt DecoratedSearchStorageNamespace.DbName  
          WORKGROUP_NAME: !Sub "${AWS::StackName}-decorated-search-storage-wg"
          # WORKGROUP_NAME: !Ref DecoratedSearchStorageWorkGroup
      Policies: 
        - Version: '2012-10-17'
          Statement: 
            - Effect: Allow
              Resource: !GetAtt DecoratedSearchStorageWorkGroup.Workgroup.WorkgroupArn
              Action: 
                - redshift-data:ExecuteStatement
                - redshift-serverless:GetCredentials
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt FilteredSearchesQueue.Arn
            BatchSize: 10
            Enabled: true

  GetCurrencyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get-currency-function
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 15
      FunctionUrlConfig:
        AuthType: NONE
      Environment:
        Variables:
          CURRENCY_CACHE_TABLE: !Ref CurrencyCacheTable
          API_URL: https://data-api.ecb.europa.eu/service/data/EXR/D..EUR.SP00.A
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CurrencyCacheTable
      Events:
        ScheduleEvent:
          Type: Schedule
          Properties:
            Schedule: cron(17 0 * * ? *)
            Enabled: false

  DecoratedSearchStorageNamespace:
    Type: AWS::RedshiftServerless::Namespace
    Properties:
      NamespaceName: !Sub "${AWS::StackName}-decorated-search-storage-ns"
      DbName: !Sub "${AWS::StackName}-decorated-search-storage-db"

  DecoratedSearchStorageWorkGroup:
    Type: AWS::RedshiftServerless::Workgroup
    Properties:
      WorkgroupName: !Sub "${AWS::StackName}-decorated-search-storage-wg"
      NamespaceName: !Ref DecoratedSearchStorageNamespace
      BaseCapacity: 32

  CurrencyCacheTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub "${AWS::StackName}-currency-cache-table"
      AttributeDefinitions: 
        - AttributeName: dateISO
          AttributeType: S
        - AttributeName: currency_type
          AttributeType: S
        - AttributeName: exchange_rate
          AttributeType: N
      KeySchema: 
        - AttributeName: currency_type
          KeyType: HASH
        - AttributeName: dateISO
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes: 
      - IndexName: myIndex
        KeySchema: 
          - AttributeName: exchange_rate
            KeyType: HASH
        Projection: 
          ProjectionType: KEYS_ONLY
        ProvisionedThroughput: 
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

  BackupStorageBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub "${AWS::StackName}-backup-storage-bucket"
        
  BackupStorageFunction:
    Type: AWS::Serverless::Function
    DependsOn: 
      - BackupStorageQueue
      - BackupStorageBucket
    Properties:
      CodeUri: src/backup-function
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 15
      Environment:
        Variables:
          BUCKET_NAME: !Ref BackupStorageBucket
      Policies: 
        - S3WritePolicy:
            BucketName: !Ref BackupStorageBucket
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt BackupStorageQueue.Arn
            BatchSize: 10
            Enabled: true

#Outputs:
#  PublishMessageFunctionUrlEndpoint:
#      Description: "Publish Function URL Endpoint"
#      Value:
#        !GetAtt PublishMessageFunctionUrl.FunctionUrl
